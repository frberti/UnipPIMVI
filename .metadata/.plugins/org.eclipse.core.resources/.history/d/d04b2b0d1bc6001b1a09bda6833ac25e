package br.com.unip.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import br.com.unip.modelo.Cliente;
import br.com.unip.modelo.Produto;


public class ClienteDAO {

	private Connection connection;

	public ClienteDAO(Connection connection) {
		this.connection = connection;
	}

	public void cadastrar(Cliente cliente) throws SQLException {
		try (PreparedStatement pstm = connection.prepareStatement(
				"INSERT INTO PRODUTO(rg, cpf, nome, dataDeCadastro, idEnderecoCliente, "
				+ "telefone, email)VALUES(?,?,?,?,?,?,?)",
				Statement.RETURN_GENERATED_KEYS)) {
			pstm.setString(1, cliente.getRg());
			pstm.setString(2, cliente.getCpf());
			pstm.setString(3, cliente.getNome());
			pstm.setDate(4, cliente.getDataDeCadastro());
			pstm.setInt(5, cliente.getIdEnderecoCliente());
			pstm.setString(6, cliente.getTelefone());
			pstm.setString(7, cliente.getEmail());
			
			pstm.execute();
			try (ResultSet rst = pstm.getGeneratedKeys()) {
				while (rst.next()) {
					cliente.setIdCliente(rst.getInt(1));
				}
			}
		}
	}

	public List<Cliente> listar() throws SQLException {
		List<Cliente> clientes = new ArrayList<Cliente>();
		try (PreparedStatement pstm = connection.prepareStatement("SELECT * FROM PRODUTO")) {
			pstm.execute();
			try (ResultSet rst = pstm.getResultSet()) {
				while (rst.next()) {
					Cliente cliente = new Cliente();
					clientes.add(cliente);
				}
			}
		}
		return produtos;
	}

	public void atualizar(Produto produto) throws SQLException {
		
		try(PreparedStatement pstm = connection.prepareStatement("UPDATE PRODUTO P SET P.NOMEPRODUTO = ?, P.FABRICANTE = ?, "
				+ "P.QUANTIDADE = ?, P.PRECO = ?, P.PLATAFORMA = ?, P.GARANTIA = ?")){
			pstm.setString(1, produto.getNomeProduto());
			pstm.setString(2, produto.getFabricante());
			pstm.setInt(3, produto.getQuantidade());
			pstm.setBigDecimal(4, produto.getPreco());
			pstm.setString(5, produto.getPlataforma());
			pstm.setString(6, produto.getGarantia());
			pstm.execute();
		}

	}

	public void remover(Produto produto) throws SQLException {
		
		try(PreparedStatement pstm = connection.prepareStatement("DELETE FROM PRODUTO WHERE ID = ?")) {
			pstm.setInt(1, produto.getCodigoBarras());
			pstm.execute();
		}

	}

}
